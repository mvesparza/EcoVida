import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import "./ProductManagement.css";
import ProfileNavbar from "../components/ProfileNavbar/ProfileNavbar";

function ProductManagement() {
  const [user, setUser] = useState(null);
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [showCreateProductForm, setShowCreateProductForm] = useState(false);
  const [showCreateCategoryForm, setShowCreateCategoryForm] = useState(false);
  const [activeTab, setActiveTab] = useState("productos");
  const [editingProduct, setEditingProduct] = useState(null);
  const [editingCategory, setEditingCategory] = useState(null);


  // üìå Datos correctos del producto seg√∫n el backend
  const [newProduct, setNewProduct] = useState({
    nombre: "",
    descripcion: "",
    precio: 0,
    stock: 0,
    imagen_url: "",
    categoria_id: ""
  });

  // üìå Datos correctos de la categor√≠a
  const [newCategory, setNewCategory] = useState({
    nombre: "",
    descripcion: ""
  });

  const [error, setError] = useState("");
  const navigate = useNavigate();

  // üìå Obtener token de localStorage
  const getToken = () => localStorage.getItem("token");

  // üìå Cargar productos y categor√≠as desde la API
  const fetchData = async () => {
    const token = getToken();
    if (!token) {
      navigate("/");
      return;
    }

    try {
      const [profileRes, productsRes, categoriesRes] = await Promise.all([
        fetch("http://localhost:3000/api/usuarios/perfil", { headers: { Authorization: `Bearer ${token}` } }),
        fetch("http://localhost:3001/api/productos"),
        fetch("http://localhost:3001/api/categorias"),
      ]);

      const [profileData, productsData, categoriesData] = await Promise.all([
        profileRes.json(),
        productsRes.json(),
        categoriesRes.json(),
      ]);

      if (!profileRes.ok) throw new Error(profileData.error);
      if (!productsRes.ok) throw new Error(productsData.error);
      if (!categoriesRes.ok) throw new Error(categoriesData.error);

      if (profileData.rol !== "administrador") {
        alert("Acceso denegado. Solo los administradores pueden gestionar productos.");
        navigate("/");
        return;
      }

      setUser(profileData);
      setProducts(productsData);
      setCategories(categoriesData);
    } catch (error) {
      console.error("Error al cargar datos:", error.message);
      navigate("/");
    }
  };

  useEffect(() => {
    fetchData();
  }, [navigate]);

  // üìå Crear Producto
  const handleCreateProduct = async (e) => {
    e.preventDefault();
    const token = getToken();

    try {
      const response = await fetch("http://localhost:3001/api/productos", {
        method: "POST",
        headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
        body: JSON.stringify(newProduct),
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      alert("Producto creado exitosamente.");
      setProducts([...products, data]); // üìå Actualiza la lista
      setShowCreateProductForm(false);
    } catch (error) {
      setError(error.message);
    }
  };

  // üìå Crear Categor√≠a
  const handleCreateCategory = async (e) => {
    e.preventDefault();
    const token = getToken();

    try {
      const response = await fetch("http://localhost:3001/api/categorias", {
        method: "POST",
        headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
        body: JSON.stringify(newCategory),
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      alert("Categor√≠a creada exitosamente.");
      setCategories([...categories, data]); // üìå Actualiza la lista
      setShowCreateCategoryForm(false);
    } catch (error) {
      setError(error.message);
    }
  };

  const handleUpdateProduct = async (product) => {
    const token = getToken();
    try {
      const response = await fetch(`http://localhost:3001/api/productos/${product.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
        body: JSON.stringify(product),
      });

      if (!response.ok) throw new Error("Error al actualizar producto");
      const updatedProduct = await response.json();
      setProducts(products.map((p) => (p.id === product.id ? updatedProduct : p)));
      setEditingProduct(null);
      alert("Producto actualizado correctamente.");
    } catch (error) {
      console.error(error.message);
    }
};


const handleDeleteProduct = async (id) => {
    const token = getToken();
    if (!window.confirm("¬øEst√°s seguro de eliminar este producto?")) return;

    try {
      const response = await fetch(`http://localhost:3001/api/productos/${id}`, {
        method: "DELETE",
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!response.ok) throw new Error("Error al eliminar producto");
      setProducts(products.filter((p) => p.id !== id));
      alert("Producto eliminado correctamente.");
    } catch (error) {
      console.error(error.message);
    }
};

const handleUpdateCategory = async (category) => {
    const token = getToken();
    try {
      const response = await fetch(`http://localhost:3001/api/categorias/${category.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
        body: JSON.stringify(category),
      });

      if (!response.ok) throw new Error("Error al actualizar categor√≠a");
      const updatedCategory = await response.json();
      setCategories(categories.map((c) => (c.id === category.id ? updatedCategory : c)));
      setEditingCategory(null);
      alert("Categor√≠a actualizada correctamente.");
    } catch (error) {
      console.error(error.message);
    }
};

const handleDeleteCategory = async (id) => {
    const token = getToken();
    if (!window.confirm("¬øEst√°s seguro de eliminar esta categor√≠a?")) return;

    try {
      const response = await fetch(`http://localhost:3001/api/categorias/${id}`, {
        method: "DELETE",
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!response.ok) throw new Error("Error al eliminar categor√≠a");
      setCategories(categories.filter((c) => c.id !== id));
      alert("Categor√≠a eliminada correctamente.");
    } catch (error) {
      console.error(error.message);
    }
};

const getLocalImageUrl = (fileName) => {
  return fileName ? `/images/${fileName}` : "default-image.jpg";
};

  if (!user) return <div className="loading">Cargando...</div>;

  return (
    <div className="product-page">
      <ProfileNavbar user={user} />
  
      <div className="product-container">
        <div className="tab-header">
          <button className={activeTab === "productos" ? "active" : ""} onClick={() => setActiveTab("productos")}>Productos</button>
          <button className={activeTab === "categorias" ? "active" : ""} onClick={() => setActiveTab("categorias")}>Categor√≠as</button>
        </div>
  
        {/* üì¶ Gesti√≥n de Productos */}
        {activeTab === "productos" && (
          <>
            <div className="header">
              <h2>üì¶ Gesti√≥n de Productos</h2>
              <button className="new-btnP" onClick={() => setShowCreateProductForm(!showCreateProductForm)}>
                {showCreateProductForm ? "Cancelar" : "Nuevo Producto"}
              </button>
            </div>
  
            {showCreateProductForm && (
            <form onSubmit={handleCreateProduct} className="product-form">
                <h3>‚ûï Agregar Producto</h3>
                
                <input
                  type="text"
                  placeholder="Nombre"
                  required
                  value={newProduct.nombre}
                  onChange={(e) => {
                    let value = e.target.value;

                    // 1Ô∏è‚É£ Sanitizar: Eliminar scripts o etiquetas HTML (protecci√≥n b√°sica contra XSS)
                    value = value.replace(/<[^>]*>?/g, "");

                    // 2Ô∏è‚É£ Limitar caracteres extra√±os (solo letras, espacios y acentos, seg√∫n el caso)
                    const regexPermitidos = /^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√± ]*$/;
                    if (!regexPermitidos.test(value)) {
                      return; // Si mete caracteres no v√°lidos, no actualizamos el estado.
                    }

                    // 3Ô∏è‚É£ Opcional: Trimear (quitar espacios al inicio y fin)
                    value = value.trimStart();  // Solo quitamos el espacio inicial, no los intermedios.

                    // 4Ô∏è‚É£ Validaci√≥n m√≠nima de longitud
                    if (value.length > 0 && value.length < 3) {
                      setError("‚ö†Ô∏è El nombre debe tener al menos 3 caracteres.");
                    } else {
                      setError("");  // Limpia error si el valor es v√°lido
                    }

                    // 5Ô∏è‚É£ Guardar en el estado solo si es v√°lido
                    setNewProduct({ ...newProduct, nombre: value });
                  }}
                />

                <input
                  type="text"
                  placeholder="Descripci√≥n"
                  required
                  value={newProduct.descripcion}
                  onChange={(e) => {
                    let value = e.target.value;

                    // 1Ô∏è‚É£ Sanitizaci√≥n: eliminar cualquier etiqueta HTML
                    value = value.replace(/<[^>]*>?/g, "");

                    // 2Ô∏è‚É£ Permitir letras, n√∫meros, espacios y algunos signos b√°sicos
                    const regexPermitidos = /^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√±0-9.,\-() ]*$/;
                    if (!regexPermitidos.test(value)) {
                      return; // Si mete caracteres raros, no actualizamos el estado.
                    }

                    // 3Ô∏è‚É£ Limpiar espacios al inicio
                    value = value.trimStart();

                    // 4Ô∏è‚É£ Validar longitud m√≠nima
                    if (value.length > 0 && value.length < 10) {
                      setError("‚ö†Ô∏è La descripci√≥n debe tener al menos 10 caracteres.");
                    } else {
                      setError(""); // Limpia error si ya es v√°lida.
                    }

                    // 5Ô∏è‚É£ Guardamos solo si es v√°lido
                    setNewProduct({ ...newProduct, descripcion: value });
                  }}
                />

                
                {/* Para el precio: usamos el tipo number, y aseguramos que el valor sea siempre un n√∫mero flotante */}
                <input
                  type="number"
                  max={20}
                  min={0.10}
                  placeholder="Precio"
                  required
                  step="any"
                  value={newProduct.precio}
                  onChange={(e) => {
                    let value = e.target.value;

                    // 1Ô∏è‚É£ Convertir a n√∫mero flotante
                    let precio = parseFloat(value);

                    // 2Ô∏è‚É£ Validaci√≥n b√°sica: ¬øes un n√∫mero?
                    if (isNaN(precio)) {
                      setError("‚ö†Ô∏è El precio debe ser un n√∫mero v√°lido.");
                      return;
                    }

                    // 3Ô∏è‚É£ Bloquear negativos y valores menores que 0.10
                    if (precio < 0.10) {
                      setError("‚ö†Ô∏è El precio no puede ser menor a 0.10.");
                      return;
                    }

                    // 4Ô∏è‚É£ M√°ximo permitido (ejemplo: 20)
                    if (precio > 20) {
                      setError("‚ö†Ô∏è El precio no puede ser mayor a 20.");
                      return;
                    }

                    // 5Ô∏è‚É£ Limpiar error si todo est√° ok
                    setError("");

                    // 6Ô∏è‚É£ Guardar el precio limpio en el estado
                    setNewProduct({ ...newProduct, precio: precio });
                  }}
                />

                
                {/* Para el stock */}
                <input
                  type="number"
                  max={20}
                  min={1}
                  placeholder="Stock"
                  required
                  value={newProduct.stock}
                  onChange={(e) => {
                    let value = e.target.value;

                    // 1Ô∏è‚É£ Convertir a entero
                    let stock = parseInt(value);

                    // 2Ô∏è‚É£ Validaci√≥n: ¬øes un n√∫mero entero v√°lido?
                    if (isNaN(stock)) {
                      setError("‚ö†Ô∏è El stock debe ser un n√∫mero v√°lido.");
                      return;
                    }

                    // 3Ô∏è‚É£ Bloqueo de valores negativos o inv√°lidos
                    if (stock < 1) {
                      setError("‚ö†Ô∏è El stock m√≠nimo permitido es 1.");
                      return;
                    }

                    // 4Ô∏è‚É£ M√°ximo permitido
                    if (stock > 20) {
                      setError("‚ö†Ô∏è El stock m√°ximo permitido es 20.");
                      return;
                    }

                    // 5Ô∏è‚É£ Limpiar error si todo es correcto
                    setError("");

                    // 6Ô∏è‚É£ Guardar el valor v√°lido en el estado
                    setNewProduct({ ...newProduct, stock: stock });
                  }}
                />

                
                <input
                  type="text"
                  placeholder="Nombre del archivo de imagen"
                  required
                  value={newProduct.imagen_url.replace(".jpg", "")}
                  onChange={(e) => {
                    let fileName = e.target.value.trim();

                    // 1Ô∏è‚É£ Sanitizar: solo permitimos letras, n√∫meros, guiones y guiones bajos
                    const regexPermitidos = /^[a-zA-Z0-9_-]*$/;

                    if (!regexPermitidos.test(fileName)) {
                      setError("‚ö†Ô∏è El nombre de archivo solo puede contener letras, n√∫meros, guiones y guiones bajos.");
                      return;
                    }

                    // 2Ô∏è‚É£ No permitir que metan rutas o secuencias peligrosas (como ../ o /etc/)
                    if (fileName.includes("/") || fileName.includes("..")) {
                      setError("‚ö†Ô∏è El nombre de archivo no puede contener rutas o directorios.");
                      return;
                    }

                    // 3Ô∏è‚É£ Forzar extensi√≥n .jpg y limpiar error si es v√°lido
                    fileName += ".jpg";
                    setError("");

                    // 4Ô∏è‚É£ Actualizar estado con el nombre limpio
                    setNewProduct({ ...newProduct, imagen_url: fileName });
                  }}
                />

                <select
                required
                onChange={(e) => setNewProduct({ ...newProduct, categoria_id: e.target.value })}
                >
                <option value="">Seleccione Categor√≠a</option>
                {categories.map((cat) => (
                    <option key={cat.id} value={cat.id}>{cat.nombre}</option>
                ))}
                </select>

                <button type="submit">Crear Producto</button>
            </form>
            )}

  
           {/* üìå Contenedor de tarjetas de productos */}
            <div className="product-cards-container">
                {products.map((p) => (
                    <div key={p.id} className="product-card">
                        <img 
                          src={getLocalImageUrl(p.imagen_url)} 
                          alt={p.nombre} 
                          className="product-image"
                        />

                        <div className="product-info">
                            <h3>{p.nombre}</h3>
                            <p>{p.descripcion}</p>
                        </div>
                        <div className="product-details">
                            <p>Precio: ${p.precio}</p>
                            <p>Stock: {p.stock}</p>
                            <p>Categor√≠a: {categories.find(cat => cat.id === p.categoria_id)?.nombre || "Sin Categor√≠a"}</p>
                        </div>
                        <div className="actions">
                            <button onClick={() => setEditingProduct(p)}>‚úè Editar</button>
                            <button className="delete-btn" onClick={() => handleDeleteProduct(p.id)}>üóë Eliminar</button>
                        </div>
                    </div>
                ))}
            </div>

  
            {/* üìå Formulario para editar producto */}
            {editingProduct && (
              <form
                onSubmit={(e) => {
                  e.preventDefault();
                  handleUpdateProduct(editingProduct);
                }}
                className="edit-product-form"
              >
                <h3>‚úè Editar Producto</h3>
                
                <input
                  type="text"
                  value={editingProduct.nombre}
                  required
                  onChange={(e) => {
                    let value = e.target.value;

                    // 1Ô∏è‚É£ Eliminar etiquetas HTML (XSS)
                    value = value.replace(/<[^>]*>?/g, "");

                    // 2Ô∏è‚É£ Permitir solo letras, espacios y acentos
                    const regexPermitidos = /^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√± ]*$/;
                    if (!regexPermitidos.test(value)) {
                      setError("‚ö†Ô∏è El nombre solo puede contener letras y espacios.");
                      return;
                    }

                    // 3Ô∏è‚É£ Eliminar espacios iniciales
                    value = value.trimStart();

                    // 4Ô∏è‚É£ Validar longitud m√≠nima (al menos 3 caracteres)
                    if (value.length > 0 && value.length < 3) {
                      setError("‚ö†Ô∏è El nombre debe tener al menos 3 caracteres.");
                    } else {
                      setError(""); // Limpia el error si es v√°lido
                    }

                    // 5Ô∏è‚É£ Guardar nombre validado
                    setEditingProduct({ ...editingProduct, nombre: value });
                  }}
                />

                
                <input
                  type="text"
                  value={editingProduct.descripcion}
                  required
                  onChange={(e) => {
                    let value = e.target.value;

                    // 1Ô∏è‚É£ Eliminar etiquetas HTML (protecci√≥n XSS)
                    value = value.replace(/<[^>]*>?/g, "");

                    // 2Ô∏è‚É£ Permitir solo letras, n√∫meros, espacios y algunos s√≠mbolos b√°sicos
                    const regexPermitidos = /^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√±0-9.,\-() ]*$/;
                    if (!regexPermitidos.test(value)) {
                      setError("‚ö†Ô∏è La descripci√≥n solo puede contener letras, n√∫meros y los caracteres ., - ( ).");
                      return;
                    }

                    // 3Ô∏è‚É£ Eliminar espacios iniciales
                    value = value.trimStart();

                    // 4Ô∏è‚É£ Validar longitud m√≠nima (por ejemplo, m√≠nimo 10 caracteres)
                    if (value.length > 0 && value.length < 10) {
                      setError("‚ö†Ô∏è La descripci√≥n debe tener al menos 10 caracteres.");
                    } else {
                      setError(""); // Limpiar error si es v√°lido
                    }

                    // 5Ô∏è‚É£ Guardar descripci√≥n validada
                    setEditingProduct({ ...editingProduct, descripcion: value });
                  }}
                />

                
                <input
                  type="number"
                  value={editingProduct.precio}
                  required
                  step="any"
                  onChange={(e) => {
                    let value = e.target.value;

                    // 1Ô∏è‚É£ Convertir a n√∫mero flotante
                    let precio = parseFloat(value);

                    // 2Ô∏è‚É£ Validar si es un n√∫mero real (no letras, etc.)
                    if (isNaN(precio)) {
                      setError("‚ö†Ô∏è El precio debe ser un n√∫mero v√°lido.");
                      return;
                    }

                    // 3Ô∏è‚É£ Validar que no sea negativo o cero
                    if (precio <= 0) {
                      setError("‚ö†Ô∏è El precio debe ser mayor a 0.");
                      return;
                    }

                    // 4Ô∏è‚É£ Opcional: definir un m√°ximo
                    if (precio > 1000) {
                      setError("‚ö†Ô∏è El precio no puede ser mayor a 1000.");
                      return;
                    }

                    // 5Ô∏è‚É£ Limpiar error si es v√°lido
                    setError("");

                    // 6Ô∏è‚É£ Guardar precio validado
                    setEditingProduct({
                      ...editingProduct,
                      precio: precio,
                    });
                  }}
                />

                
                <input
                  type="number"
                  value={editingProduct.stock}
                  required
                  onChange={(e) => {
                    let value = e.target.value;

                    // 1Ô∏è‚É£ Convertir a entero
                    let stock = parseInt(value);

                    // 2Ô∏è‚É£ Validar que sea un n√∫mero real (no letras o caracteres raros)
                    if (isNaN(stock)) {
                      setError("‚ö†Ô∏è El stock debe ser un n√∫mero v√°lido.");
                      return;
                    }

                    // 3Ô∏è‚É£ Validar que sea positivo (m√≠nimo 1)
                    if (stock < 1) {
                      setError("‚ö†Ô∏è El stock m√≠nimo permitido es 1.");
                      return;
                    }

                    // 4Ô∏è‚É£ Definir un m√°ximo (opcional)
                    if (stock > 1000) {
                      setError("‚ö†Ô∏è El stock no puede ser mayor a 1000.");
                      return;
                    }

                    // 5Ô∏è‚É£ Limpiar error si es v√°lido
                    setError("");

                    // 6Ô∏è‚É£ Guardar stock validado
                    setEditingProduct({
                      ...editingProduct,
                      stock: stock,
                    });
                  }}
                />

                
                {/* Nueva entrada para la URL de la imagen */}
                <input
                    type="text"
                    value={editingProduct.imagen_url || ""}
                    placeholder="URL de Imagen"
                    required
                    onChange={(e) => {
                      let value = e.target.value.trim();

                      // 1Ô∏è‚É£ Eliminar etiquetas HTML o scripts (protecci√≥n b√°sica contra XSS)
                      value = value.replace(/<[^>]*>?/g, "");

                      // 2Ô∏è‚É£ No permitir rutas sospechosas o subidas de carpetas
                      if (value.includes("..") || value.includes("/")) {
                        setError("‚ö†Ô∏è El nombre de archivo o URL no puede contener rutas o directorios.");
                        return;
                      }

                      // 3Ô∏è‚É£ Forzar extensi√≥n ".jpg"
                      if (!value.endsWith(".jpg")) {
                        value += ".jpg";
                      }

                      // 4Ô∏è‚É£ Validar formato final (solo letras, n√∫meros, guiones y guiones bajos en el nombre)
                      const nombreArchivo = value.replace(".jpg", ""); // Quitamos el .jpg para validar nombre
                      const regexPermitidos = /^[a-zA-Z0-9_-]+$/;

                      if (!regexPermitidos.test(nombreArchivo)) {
                        setError("‚ö†Ô∏è El nombre de archivo solo puede contener letras, n√∫meros, guiones y guiones bajos.");
                        return;
                      }

                      // 5Ô∏è‚É£ Limpiar error si es v√°lido
                      setError("");

                      // 6Ô∏è‚É£ Guardar URL validada
                      setEditingProduct({ ...editingProduct, imagen_url: value });
                    }}
                  />


                <button type="submit">Actualizar Producto</button>
                <button type="button" onClick={() => setEditingProduct(null)}>Cancelar</button>
              </form>
            )}

          </>
        )}
  
        {/* üìÇ Gesti√≥n de Categor√≠as */}
        {activeTab === "categorias" && (
          <>
            <h2>üìÇ Gesti√≥n de Categor√≠as</h2>
            <button className="new-btn" onClick={() => setShowCreateCategoryForm(!showCreateCategoryForm)}>
              {showCreateCategoryForm ? "Cancelar" : "Nueva Categor√≠a"}
            </button>
  
            {showCreateCategoryForm && (
              <form onSubmit={handleCreateCategory} className="category-form">
                <h3>‚ûï Agregar Categor√≠a</h3>
                <input
                  type="text"
                  placeholder="Nombre"
                  required
                  onChange={(e) => {
                    let value = e.target.value;

                    // 1Ô∏è‚É£ Eliminar etiquetas HTML (protecci√≥n contra XSS)
                    value = value.replace(/<[^>]*>?/g, "");

                    // 2Ô∏è‚É£ Permitir solo letras, espacios y acentos
                    const regexPermitidos = /^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√± ]*$/;

                    if (!regexPermitidos.test(value)) {
                      setError("‚ö†Ô∏è El nombre solo puede contener letras, espacios y acentos.");
                      return; // No actualiza el estado si es inv√°lido
                    }

                    // 3Ô∏è‚É£ Quitar espacios iniciales
                    value = value.trimStart();

                    // 4Ô∏è‚É£ Validar longitud m√≠nima (al menos 3 caracteres)
                    if (value.length > 0 && value.length < 3) {
                      setError("‚ö†Ô∏è El nombre debe tener al menos 3 caracteres.");
                    } else {
                      setError(""); // Limpia error si ya es v√°lido
                    }

                    // 5Ô∏è‚É£ Actualizar estado solo si es v√°lido
                    setNewCategory({ ...newCategory, nombre: value });
                  }}
                />

                <input
                  type="text"
                  placeholder="Descripci√≥n"
                  required
                  onChange={(e) => {
                    let value = e.target.value;

                    // 1Ô∏è‚É£ Eliminar etiquetas HTML (protecci√≥n contra XSS)
                    value = value.replace(/<[^>]*>?/g, "");

                    // 2Ô∏è‚É£ Permitir solo letras, n√∫meros, espacios y algunos s√≠mbolos b√°sicos
                    const regexPermitidos = /^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√±0-9.,\-() ]*$/;

                    if (!regexPermitidos.test(value)) {
                      setError("‚ö†Ô∏è La descripci√≥n solo puede contener letras, n√∫meros, espacios y caracteres ., - ()");
                      return; // No actualiza el estado si es inv√°lido
                    }

                    // 3Ô∏è‚É£ Quitar espacios iniciales
                    value = value.trimStart();

                    // 4Ô∏è‚É£ Validar longitud m√≠nima (al menos 10 caracteres)
                    if (value.length > 0 && value.length < 10) {
                      setError("‚ö†Ô∏è La descripci√≥n debe tener al menos 10 caracteres.");
                    } else {
                      setError(""); // Limpia error si ya es v√°lida
                    }

                    // 5Ô∏è‚É£ Actualizar estado solo si es v√°lido
                    setNewCategory({ ...newCategory, descripcion: value });
                  }}
                />

                <button type="submit" className="create-category-btn">Crear Categor√≠a</button>
              </form>
            )}
  
            {/* üìå Lista de categor√≠as */}
            <div className="categories-list-container">
                <ul className="categories-list">
                    {categories.map((c) => (
                        <li key={c.id}>
                            <span>{c.nombre} - {c.descripcion}</span>
                            <div>
                                <button 
                                    className="edit-btn" 
                                    onClick={() => setEditingCategory(c)}>
                                    Editar
                                </button>
                                <button 
                                    className="delete-btn" 
                                    onClick={() => handleDeleteCategory(c.id)}>
                                    Eliminar
                                </button>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>


  
            {/* üìå Formulario para editar categor√≠a */}
            {editingCategory && (
              <form
                onSubmit={(e) => {
                  e.preventDefault();
                  handleUpdateCategory(editingCategory);
                }}
                className="edit-category-form"
              >
                <h3>‚úè Editar Categor√≠a</h3>
                <input
                  type="text"
                  value={editingCategory.nombre}
                  required
                  onChange={(e) => {
                    let value = e.target.value;

                    // 1Ô∏è‚É£ Eliminar etiquetas HTML (protecci√≥n b√°sica contra XSS)
                    value = value.replace(/<[^>]*>?/g, "");

                    // 2Ô∏è‚É£ Solo permitir letras, espacios y acentos (sin n√∫meros ni s√≠mbolos especiales)
                    const regexPermitidos = /^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√± ]*$/;
                    if (!regexPermitidos.test(value)) {
                      setError("‚ö†Ô∏è El nombre de la categor√≠a solo puede contener letras y espacios.");
                      return;
                    }

                    // 3Ô∏è‚É£ Eliminar espacios iniciales
                    value = value.trimStart();

                    // 4Ô∏è‚É£ Validar longitud m√≠nima (al menos 3 caracteres)
                    if (value.length > 0 && value.length < 3) {
                      setError("‚ö†Ô∏è El nombre de la categor√≠a debe tener al menos 3 caracteres.");
                    } else {
                      setError(""); // Limpiar error si es v√°lido
                    }

                    // 5Ô∏è‚É£ Guardar nombre validado
                    setEditingCategory({ ...editingCategory, nombre: value });
                  }}
                />

                <input
                  type="text"
                  value={editingCategory.descripcion}
                  required
                  onChange={(e) => {
                    let value = e.target.value;

                    // 1Ô∏è‚É£ Eliminar etiquetas HTML (protecci√≥n b√°sica contra XSS)
                    value = value.replace(/<[^>]*>?/g, "");

                    // 2Ô∏è‚É£ Permitir solo letras, n√∫meros, espacios y signos b√°sicos (, . -)
                    const regexPermitidos = /^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√±0-9.,\-() ]*$/;
                    if (!regexPermitidos.test(value)) {
                      setError("‚ö†Ô∏è La descripci√≥n solo puede contener letras, n√∫meros, espacios y signos b√°sicos (, . - ()).");
                      return;
                    }

                    // 3Ô∏è‚É£ Eliminar espacios iniciales
                    value = value.trimStart();

                    // 4Ô∏è‚É£ Validar longitud m√≠nima
                    if (value.length > 0 && value.length < 10) {
                      setError("‚ö†Ô∏è La descripci√≥n debe tener al menos 10 caracteres.");
                    } else {
                      setError(""); // Limpiar error si es v√°lida
                    }

                    // 5Ô∏è‚É£ Guardar descripci√≥n validada
                    setEditingCategory({ ...editingCategory, descripcion: value });
                  }}
                />

                <button type="submit">Actualizar Categor√≠a</button>
                <button type="button" onClick={() => setEditingCategory(null)}>
                  Cancelar
                </button>
              </form>
            )}

          </>
        )}
      </div>
    </div>
  );
  
}

export default ProductManagement;
